<?php

/**
 * Base class that represents a row from the 'user_sc' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 11/28/11 15:03:10
 *
 * @package    lib.model.om
 */
abstract class BaseUserSc extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UserScPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the profile field.
	 * @var        int
	 */
	protected $profile;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the flag field.
	 * @var        string
	 */
	protected $flag;

	/**
	 * The value for the token_session field.
	 * @var        string
	 */
	protected $token_session;

	/**
	 * @var        array TreeSc[] Collection to store aggregation of TreeSc objects.
	 */
	protected $collTreeScsRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTreeScsRelatedByUserId.
	 */
	private $lastTreeScRelatedByUserIdCriteria = null;

	/**
	 * @var        array TreeSc[] Collection to store aggregation of TreeSc objects.
	 */
	protected $collTreeScsRelatedByResponsableId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTreeScsRelatedByResponsableId.
	 */
	private $lastTreeScRelatedByResponsableIdCriteria = null;

	/**
	 * @var        array TreeUser[] Collection to store aggregation of TreeUser objects.
	 */
	protected $collTreeUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTreeUsers.
	 */
	private $lastTreeUserCriteria = null;

	/**
	 * @var        array IndicatorsSc[] Collection to store aggregation of IndicatorsSc objects.
	 */
	protected $collIndicatorsScs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIndicatorsScs.
	 */
	private $lastIndicatorsScCriteria = null;

	/**
	 * @var        array GrupoTrabajoSc[] Collection to store aggregation of GrupoTrabajoSc objects.
	 */
	protected $collGrupoTrabajoScs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGrupoTrabajoScs.
	 */
	private $lastGrupoTrabajoScCriteria = null;

	/**
	 * @var        array DetalleGrupoTrabajoSc[] Collection to store aggregation of DetalleGrupoTrabajoSc objects.
	 */
	protected $collDetalleGrupoTrabajoScs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDetalleGrupoTrabajoScs.
	 */
	private $lastDetalleGrupoTrabajoScCriteria = null;

	/**
	 * @var        array SolicitudGrupoTrabajoSc[] Collection to store aggregation of SolicitudGrupoTrabajoSc objects.
	 */
	protected $collSolicitudGrupoTrabajoScs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSolicitudGrupoTrabajoScs.
	 */
	private $lastSolicitudGrupoTrabajoScCriteria = null;

	/**
	 * @var        array AsignacionSc[] Collection to store aggregation of AsignacionSc objects.
	 */
	protected $collAsignacionScs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAsignacionScs.
	 */
	private $lastAsignacionScCriteria = null;

	/**
	 * @var        array DataIndicadores[] Collection to store aggregation of DataIndicadores objects.
	 */
	protected $collDataIndicadoress;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDataIndicadoress.
	 */
	private $lastDataIndicadoresCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'UserScPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [profile] column value.
	 * 
	 * @return     int
	 */
	public function getProfile()
	{
		return $this->profile;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [flag] column value.
	 * 
	 * @return     string
	 */
	public function getFlag()
	{
		return $this->flag;
	}

	/**
	 * Get the [token_session] column value.
	 * 
	 * @return     string
	 */
	public function getTokenSession()
	{
		return $this->token_session;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     UserSc The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UserScPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     UserSc The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UserScPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [profile] column.
	 * 
	 * @param      int $v new value
	 * @return     UserSc The current object (for fluent API support)
	 */
	public function setProfile($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profile !== $v) {
			$this->profile = $v;
			$this->modifiedColumns[] = UserScPeer::PROFILE;
		}

		return $this;
	} // setProfile()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     UserSc The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = UserScPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     UserSc The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserScPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [flag] column.
	 * 
	 * @param      string $v new value
	 * @return     UserSc The current object (for fluent API support)
	 */
	public function setFlag($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->flag !== $v) {
			$this->flag = $v;
			$this->modifiedColumns[] = UserScPeer::FLAG;
		}

		return $this;
	} // setFlag()

	/**
	 * Set the value of [token_session] column.
	 * 
	 * @param      string $v new value
	 * @return     UserSc The current object (for fluent API support)
	 */
	public function setTokenSession($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->token_session !== $v) {
			$this->token_session = $v;
			$this->modifiedColumns[] = UserScPeer::TOKEN_SESSION;
		}

		return $this;
	} // setTokenSession()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->email = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->profile = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->password = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->created_at = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->flag = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->token_session = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 7; // 7 = UserScPeer::NUM_COLUMNS - UserScPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating UserSc object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserScPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UserScPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collTreeScsRelatedByUserId = null;
			$this->lastTreeScRelatedByUserIdCriteria = null;

			$this->collTreeScsRelatedByResponsableId = null;
			$this->lastTreeScRelatedByResponsableIdCriteria = null;

			$this->collTreeUsers = null;
			$this->lastTreeUserCriteria = null;

			$this->collIndicatorsScs = null;
			$this->lastIndicatorsScCriteria = null;

			$this->collGrupoTrabajoScs = null;
			$this->lastGrupoTrabajoScCriteria = null;

			$this->collDetalleGrupoTrabajoScs = null;
			$this->lastDetalleGrupoTrabajoScCriteria = null;

			$this->collSolicitudGrupoTrabajoScs = null;
			$this->lastSolicitudGrupoTrabajoScCriteria = null;

			$this->collAsignacionScs = null;
			$this->lastAsignacionScCriteria = null;

			$this->collDataIndicadoress = null;
			$this->lastDataIndicadoresCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserScPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUserSc:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				UserScPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUserSc:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserScPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUserSc:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(UserScPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUserSc:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UserScPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UserScPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UserScPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UserScPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTreeScsRelatedByUserId !== null) {
				foreach ($this->collTreeScsRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTreeScsRelatedByResponsableId !== null) {
				foreach ($this->collTreeScsRelatedByResponsableId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTreeUsers !== null) {
				foreach ($this->collTreeUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIndicatorsScs !== null) {
				foreach ($this->collIndicatorsScs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGrupoTrabajoScs !== null) {
				foreach ($this->collGrupoTrabajoScs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDetalleGrupoTrabajoScs !== null) {
				foreach ($this->collDetalleGrupoTrabajoScs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSolicitudGrupoTrabajoScs !== null) {
				foreach ($this->collSolicitudGrupoTrabajoScs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAsignacionScs !== null) {
				foreach ($this->collAsignacionScs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDataIndicadoress !== null) {
				foreach ($this->collDataIndicadoress as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UserScPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTreeScsRelatedByUserId !== null) {
					foreach ($this->collTreeScsRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTreeScsRelatedByResponsableId !== null) {
					foreach ($this->collTreeScsRelatedByResponsableId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTreeUsers !== null) {
					foreach ($this->collTreeUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIndicatorsScs !== null) {
					foreach ($this->collIndicatorsScs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGrupoTrabajoScs !== null) {
					foreach ($this->collGrupoTrabajoScs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDetalleGrupoTrabajoScs !== null) {
					foreach ($this->collDetalleGrupoTrabajoScs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSolicitudGrupoTrabajoScs !== null) {
					foreach ($this->collSolicitudGrupoTrabajoScs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAsignacionScs !== null) {
					foreach ($this->collAsignacionScs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDataIndicadoress !== null) {
					foreach ($this->collDataIndicadoress as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserScPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getEmail();
				break;
			case 2:
				return $this->getProfile();
				break;
			case 3:
				return $this->getPassword();
				break;
			case 4:
				return $this->getCreatedAt();
				break;
			case 5:
				return $this->getFlag();
				break;
			case 6:
				return $this->getTokenSession();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UserScPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getEmail(),
			$keys[2] => $this->getProfile(),
			$keys[3] => $this->getPassword(),
			$keys[4] => $this->getCreatedAt(),
			$keys[5] => $this->getFlag(),
			$keys[6] => $this->getTokenSession(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserScPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setEmail($value);
				break;
			case 2:
				$this->setProfile($value);
				break;
			case 3:
				$this->setPassword($value);
				break;
			case 4:
				$this->setCreatedAt($value);
				break;
			case 5:
				$this->setFlag($value);
				break;
			case 6:
				$this->setTokenSession($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UserScPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setEmail($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProfile($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPassword($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCreatedAt($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setFlag($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTokenSession($arr[$keys[6]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UserScPeer::DATABASE_NAME);

		if ($this->isColumnModified(UserScPeer::ID)) $criteria->add(UserScPeer::ID, $this->id);
		if ($this->isColumnModified(UserScPeer::EMAIL)) $criteria->add(UserScPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UserScPeer::PROFILE)) $criteria->add(UserScPeer::PROFILE, $this->profile);
		if ($this->isColumnModified(UserScPeer::PASSWORD)) $criteria->add(UserScPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(UserScPeer::CREATED_AT)) $criteria->add(UserScPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(UserScPeer::FLAG)) $criteria->add(UserScPeer::FLAG, $this->flag);
		if ($this->isColumnModified(UserScPeer::TOKEN_SESSION)) $criteria->add(UserScPeer::TOKEN_SESSION, $this->token_session);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UserScPeer::DATABASE_NAME);

		$criteria->add(UserScPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of UserSc (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setEmail($this->email);

		$copyObj->setProfile($this->profile);

		$copyObj->setPassword($this->password);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setFlag($this->flag);

		$copyObj->setTokenSession($this->token_session);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTreeScsRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTreeScRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTreeScsRelatedByResponsableId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTreeScRelatedByResponsableId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTreeUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTreeUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIndicatorsScs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIndicatorsSc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGrupoTrabajoScs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGrupoTrabajoSc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDetalleGrupoTrabajoScs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDetalleGrupoTrabajoSc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSolicitudGrupoTrabajoScs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSolicitudGrupoTrabajoSc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAsignacionScs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAsignacionSc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDataIndicadoress() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDataIndicadores($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     UserSc Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UserScPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UserScPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collTreeScsRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTreeScsRelatedByUserId()
	 */
	public function clearTreeScsRelatedByUserId()
	{
		$this->collTreeScsRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTreeScsRelatedByUserId collection (array).
	 *
	 * By default this just sets the collTreeScsRelatedByUserId collection to an empty array (like clearcollTreeScsRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTreeScsRelatedByUserId()
	{
		$this->collTreeScsRelatedByUserId = array();
	}

	/**
	 * Gets an array of TreeSc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related TreeScsRelatedByUserId from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TreeSc[]
	 * @throws     PropelException
	 */
	public function getTreeScsRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTreeScsRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collTreeScsRelatedByUserId = array();
			} else {

				$criteria->add(TreeScPeer::USER_ID, $this->id);

				TreeScPeer::addSelectColumns($criteria);
				$this->collTreeScsRelatedByUserId = TreeScPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TreeScPeer::USER_ID, $this->id);

				TreeScPeer::addSelectColumns($criteria);
				if (!isset($this->lastTreeScRelatedByUserIdCriteria) || !$this->lastTreeScRelatedByUserIdCriteria->equals($criteria)) {
					$this->collTreeScsRelatedByUserId = TreeScPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTreeScRelatedByUserIdCriteria = $criteria;
		return $this->collTreeScsRelatedByUserId;
	}

	/**
	 * Returns the number of related TreeSc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TreeSc objects.
	 * @throws     PropelException
	 */
	public function countTreeScsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTreeScsRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TreeScPeer::USER_ID, $this->id);

				$count = TreeScPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TreeScPeer::USER_ID, $this->id);

				if (!isset($this->lastTreeScRelatedByUserIdCriteria) || !$this->lastTreeScRelatedByUserIdCriteria->equals($criteria)) {
					$count = TreeScPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTreeScsRelatedByUserId);
				}
			} else {
				$count = count($this->collTreeScsRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TreeSc object to this object
	 * through the TreeSc foreign key attribute.
	 *
	 * @param      TreeSc $l TreeSc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTreeScRelatedByUserId(TreeSc $l)
	{
		if ($this->collTreeScsRelatedByUserId === null) {
			$this->initTreeScsRelatedByUserId();
		}
		if (!in_array($l, $this->collTreeScsRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTreeScsRelatedByUserId, $l);
			$l->setUserScRelatedByUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related TreeScsRelatedByUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getTreeScsRelatedByUserIdJoinGrupoTrabajoSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTreeScsRelatedByUserId === null) {
			if ($this->isNew()) {
				$this->collTreeScsRelatedByUserId = array();
			} else {

				$criteria->add(TreeScPeer::USER_ID, $this->id);

				$this->collTreeScsRelatedByUserId = TreeScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TreeScPeer::USER_ID, $this->id);

			if (!isset($this->lastTreeScRelatedByUserIdCriteria) || !$this->lastTreeScRelatedByUserIdCriteria->equals($criteria)) {
				$this->collTreeScsRelatedByUserId = TreeScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastTreeScRelatedByUserIdCriteria = $criteria;

		return $this->collTreeScsRelatedByUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related TreeScsRelatedByUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getTreeScsRelatedByUserIdJoinPeriodoSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTreeScsRelatedByUserId === null) {
			if ($this->isNew()) {
				$this->collTreeScsRelatedByUserId = array();
			} else {

				$criteria->add(TreeScPeer::USER_ID, $this->id);

				$this->collTreeScsRelatedByUserId = TreeScPeer::doSelectJoinPeriodoSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TreeScPeer::USER_ID, $this->id);

			if (!isset($this->lastTreeScRelatedByUserIdCriteria) || !$this->lastTreeScRelatedByUserIdCriteria->equals($criteria)) {
				$this->collTreeScsRelatedByUserId = TreeScPeer::doSelectJoinPeriodoSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastTreeScRelatedByUserIdCriteria = $criteria;

		return $this->collTreeScsRelatedByUserId;
	}

	/**
	 * Clears out the collTreeScsRelatedByResponsableId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTreeScsRelatedByResponsableId()
	 */
	public function clearTreeScsRelatedByResponsableId()
	{
		$this->collTreeScsRelatedByResponsableId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTreeScsRelatedByResponsableId collection (array).
	 *
	 * By default this just sets the collTreeScsRelatedByResponsableId collection to an empty array (like clearcollTreeScsRelatedByResponsableId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTreeScsRelatedByResponsableId()
	{
		$this->collTreeScsRelatedByResponsableId = array();
	}

	/**
	 * Gets an array of TreeSc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related TreeScsRelatedByResponsableId from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TreeSc[]
	 * @throws     PropelException
	 */
	public function getTreeScsRelatedByResponsableId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTreeScsRelatedByResponsableId === null) {
			if ($this->isNew()) {
			   $this->collTreeScsRelatedByResponsableId = array();
			} else {

				$criteria->add(TreeScPeer::RESPONSABLE_ID, $this->id);

				TreeScPeer::addSelectColumns($criteria);
				$this->collTreeScsRelatedByResponsableId = TreeScPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TreeScPeer::RESPONSABLE_ID, $this->id);

				TreeScPeer::addSelectColumns($criteria);
				if (!isset($this->lastTreeScRelatedByResponsableIdCriteria) || !$this->lastTreeScRelatedByResponsableIdCriteria->equals($criteria)) {
					$this->collTreeScsRelatedByResponsableId = TreeScPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTreeScRelatedByResponsableIdCriteria = $criteria;
		return $this->collTreeScsRelatedByResponsableId;
	}

	/**
	 * Returns the number of related TreeSc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TreeSc objects.
	 * @throws     PropelException
	 */
	public function countTreeScsRelatedByResponsableId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTreeScsRelatedByResponsableId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TreeScPeer::RESPONSABLE_ID, $this->id);

				$count = TreeScPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TreeScPeer::RESPONSABLE_ID, $this->id);

				if (!isset($this->lastTreeScRelatedByResponsableIdCriteria) || !$this->lastTreeScRelatedByResponsableIdCriteria->equals($criteria)) {
					$count = TreeScPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTreeScsRelatedByResponsableId);
				}
			} else {
				$count = count($this->collTreeScsRelatedByResponsableId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TreeSc object to this object
	 * through the TreeSc foreign key attribute.
	 *
	 * @param      TreeSc $l TreeSc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTreeScRelatedByResponsableId(TreeSc $l)
	{
		if ($this->collTreeScsRelatedByResponsableId === null) {
			$this->initTreeScsRelatedByResponsableId();
		}
		if (!in_array($l, $this->collTreeScsRelatedByResponsableId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTreeScsRelatedByResponsableId, $l);
			$l->setUserScRelatedByResponsableId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related TreeScsRelatedByResponsableId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getTreeScsRelatedByResponsableIdJoinGrupoTrabajoSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTreeScsRelatedByResponsableId === null) {
			if ($this->isNew()) {
				$this->collTreeScsRelatedByResponsableId = array();
			} else {

				$criteria->add(TreeScPeer::RESPONSABLE_ID, $this->id);

				$this->collTreeScsRelatedByResponsableId = TreeScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TreeScPeer::RESPONSABLE_ID, $this->id);

			if (!isset($this->lastTreeScRelatedByResponsableIdCriteria) || !$this->lastTreeScRelatedByResponsableIdCriteria->equals($criteria)) {
				$this->collTreeScsRelatedByResponsableId = TreeScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastTreeScRelatedByResponsableIdCriteria = $criteria;

		return $this->collTreeScsRelatedByResponsableId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related TreeScsRelatedByResponsableId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getTreeScsRelatedByResponsableIdJoinPeriodoSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTreeScsRelatedByResponsableId === null) {
			if ($this->isNew()) {
				$this->collTreeScsRelatedByResponsableId = array();
			} else {

				$criteria->add(TreeScPeer::RESPONSABLE_ID, $this->id);

				$this->collTreeScsRelatedByResponsableId = TreeScPeer::doSelectJoinPeriodoSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TreeScPeer::RESPONSABLE_ID, $this->id);

			if (!isset($this->lastTreeScRelatedByResponsableIdCriteria) || !$this->lastTreeScRelatedByResponsableIdCriteria->equals($criteria)) {
				$this->collTreeScsRelatedByResponsableId = TreeScPeer::doSelectJoinPeriodoSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastTreeScRelatedByResponsableIdCriteria = $criteria;

		return $this->collTreeScsRelatedByResponsableId;
	}

	/**
	 * Clears out the collTreeUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTreeUsers()
	 */
	public function clearTreeUsers()
	{
		$this->collTreeUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTreeUsers collection (array).
	 *
	 * By default this just sets the collTreeUsers collection to an empty array (like clearcollTreeUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTreeUsers()
	{
		$this->collTreeUsers = array();
	}

	/**
	 * Gets an array of TreeUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related TreeUsers from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TreeUser[]
	 * @throws     PropelException
	 */
	public function getTreeUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTreeUsers === null) {
			if ($this->isNew()) {
			   $this->collTreeUsers = array();
			} else {

				$criteria->add(TreeUserPeer::USER_ID, $this->id);

				TreeUserPeer::addSelectColumns($criteria);
				$this->collTreeUsers = TreeUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TreeUserPeer::USER_ID, $this->id);

				TreeUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastTreeUserCriteria) || !$this->lastTreeUserCriteria->equals($criteria)) {
					$this->collTreeUsers = TreeUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTreeUserCriteria = $criteria;
		return $this->collTreeUsers;
	}

	/**
	 * Returns the number of related TreeUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TreeUser objects.
	 * @throws     PropelException
	 */
	public function countTreeUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTreeUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TreeUserPeer::USER_ID, $this->id);

				$count = TreeUserPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TreeUserPeer::USER_ID, $this->id);

				if (!isset($this->lastTreeUserCriteria) || !$this->lastTreeUserCriteria->equals($criteria)) {
					$count = TreeUserPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTreeUsers);
				}
			} else {
				$count = count($this->collTreeUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TreeUser object to this object
	 * through the TreeUser foreign key attribute.
	 *
	 * @param      TreeUser $l TreeUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTreeUser(TreeUser $l)
	{
		if ($this->collTreeUsers === null) {
			$this->initTreeUsers();
		}
		if (!in_array($l, $this->collTreeUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTreeUsers, $l);
			$l->setUserSc($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related TreeUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getTreeUsersJoinTreeSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTreeUsers === null) {
			if ($this->isNew()) {
				$this->collTreeUsers = array();
			} else {

				$criteria->add(TreeUserPeer::USER_ID, $this->id);

				$this->collTreeUsers = TreeUserPeer::doSelectJoinTreeSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TreeUserPeer::USER_ID, $this->id);

			if (!isset($this->lastTreeUserCriteria) || !$this->lastTreeUserCriteria->equals($criteria)) {
				$this->collTreeUsers = TreeUserPeer::doSelectJoinTreeSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastTreeUserCriteria = $criteria;

		return $this->collTreeUsers;
	}

	/**
	 * Clears out the collIndicatorsScs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIndicatorsScs()
	 */
	public function clearIndicatorsScs()
	{
		$this->collIndicatorsScs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIndicatorsScs collection (array).
	 *
	 * By default this just sets the collIndicatorsScs collection to an empty array (like clearcollIndicatorsScs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIndicatorsScs()
	{
		$this->collIndicatorsScs = array();
	}

	/**
	 * Gets an array of IndicatorsSc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related IndicatorsScs from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array IndicatorsSc[]
	 * @throws     PropelException
	 */
	public function getIndicatorsScs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIndicatorsScs === null) {
			if ($this->isNew()) {
			   $this->collIndicatorsScs = array();
			} else {

				$criteria->add(IndicatorsScPeer::RESPONSABLE_ID, $this->id);

				IndicatorsScPeer::addSelectColumns($criteria);
				$this->collIndicatorsScs = IndicatorsScPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IndicatorsScPeer::RESPONSABLE_ID, $this->id);

				IndicatorsScPeer::addSelectColumns($criteria);
				if (!isset($this->lastIndicatorsScCriteria) || !$this->lastIndicatorsScCriteria->equals($criteria)) {
					$this->collIndicatorsScs = IndicatorsScPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIndicatorsScCriteria = $criteria;
		return $this->collIndicatorsScs;
	}

	/**
	 * Returns the number of related IndicatorsSc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related IndicatorsSc objects.
	 * @throws     PropelException
	 */
	public function countIndicatorsScs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIndicatorsScs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IndicatorsScPeer::RESPONSABLE_ID, $this->id);

				$count = IndicatorsScPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IndicatorsScPeer::RESPONSABLE_ID, $this->id);

				if (!isset($this->lastIndicatorsScCriteria) || !$this->lastIndicatorsScCriteria->equals($criteria)) {
					$count = IndicatorsScPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collIndicatorsScs);
				}
			} else {
				$count = count($this->collIndicatorsScs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a IndicatorsSc object to this object
	 * through the IndicatorsSc foreign key attribute.
	 *
	 * @param      IndicatorsSc $l IndicatorsSc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIndicatorsSc(IndicatorsSc $l)
	{
		if ($this->collIndicatorsScs === null) {
			$this->initIndicatorsScs();
		}
		if (!in_array($l, $this->collIndicatorsScs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIndicatorsScs, $l);
			$l->setUserSc($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related IndicatorsScs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getIndicatorsScsJoinTreeSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIndicatorsScs === null) {
			if ($this->isNew()) {
				$this->collIndicatorsScs = array();
			} else {

				$criteria->add(IndicatorsScPeer::RESPONSABLE_ID, $this->id);

				$this->collIndicatorsScs = IndicatorsScPeer::doSelectJoinTreeSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(IndicatorsScPeer::RESPONSABLE_ID, $this->id);

			if (!isset($this->lastIndicatorsScCriteria) || !$this->lastIndicatorsScCriteria->equals($criteria)) {
				$this->collIndicatorsScs = IndicatorsScPeer::doSelectJoinTreeSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastIndicatorsScCriteria = $criteria;

		return $this->collIndicatorsScs;
	}

	/**
	 * Clears out the collGrupoTrabajoScs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGrupoTrabajoScs()
	 */
	public function clearGrupoTrabajoScs()
	{
		$this->collGrupoTrabajoScs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGrupoTrabajoScs collection (array).
	 *
	 * By default this just sets the collGrupoTrabajoScs collection to an empty array (like clearcollGrupoTrabajoScs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGrupoTrabajoScs()
	{
		$this->collGrupoTrabajoScs = array();
	}

	/**
	 * Gets an array of GrupoTrabajoSc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related GrupoTrabajoScs from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GrupoTrabajoSc[]
	 * @throws     PropelException
	 */
	public function getGrupoTrabajoScs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGrupoTrabajoScs === null) {
			if ($this->isNew()) {
			   $this->collGrupoTrabajoScs = array();
			} else {

				$criteria->add(GrupoTrabajoScPeer::OWNER_ID, $this->id);

				GrupoTrabajoScPeer::addSelectColumns($criteria);
				$this->collGrupoTrabajoScs = GrupoTrabajoScPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GrupoTrabajoScPeer::OWNER_ID, $this->id);

				GrupoTrabajoScPeer::addSelectColumns($criteria);
				if (!isset($this->lastGrupoTrabajoScCriteria) || !$this->lastGrupoTrabajoScCriteria->equals($criteria)) {
					$this->collGrupoTrabajoScs = GrupoTrabajoScPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGrupoTrabajoScCriteria = $criteria;
		return $this->collGrupoTrabajoScs;
	}

	/**
	 * Returns the number of related GrupoTrabajoSc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GrupoTrabajoSc objects.
	 * @throws     PropelException
	 */
	public function countGrupoTrabajoScs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGrupoTrabajoScs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GrupoTrabajoScPeer::OWNER_ID, $this->id);

				$count = GrupoTrabajoScPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GrupoTrabajoScPeer::OWNER_ID, $this->id);

				if (!isset($this->lastGrupoTrabajoScCriteria) || !$this->lastGrupoTrabajoScCriteria->equals($criteria)) {
					$count = GrupoTrabajoScPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collGrupoTrabajoScs);
				}
			} else {
				$count = count($this->collGrupoTrabajoScs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GrupoTrabajoSc object to this object
	 * through the GrupoTrabajoSc foreign key attribute.
	 *
	 * @param      GrupoTrabajoSc $l GrupoTrabajoSc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGrupoTrabajoSc(GrupoTrabajoSc $l)
	{
		if ($this->collGrupoTrabajoScs === null) {
			$this->initGrupoTrabajoScs();
		}
		if (!in_array($l, $this->collGrupoTrabajoScs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGrupoTrabajoScs, $l);
			$l->setUserSc($this);
		}
	}

	/**
	 * Clears out the collDetalleGrupoTrabajoScs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDetalleGrupoTrabajoScs()
	 */
	public function clearDetalleGrupoTrabajoScs()
	{
		$this->collDetalleGrupoTrabajoScs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDetalleGrupoTrabajoScs collection (array).
	 *
	 * By default this just sets the collDetalleGrupoTrabajoScs collection to an empty array (like clearcollDetalleGrupoTrabajoScs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDetalleGrupoTrabajoScs()
	{
		$this->collDetalleGrupoTrabajoScs = array();
	}

	/**
	 * Gets an array of DetalleGrupoTrabajoSc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related DetalleGrupoTrabajoScs from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DetalleGrupoTrabajoSc[]
	 * @throws     PropelException
	 */
	public function getDetalleGrupoTrabajoScs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDetalleGrupoTrabajoScs === null) {
			if ($this->isNew()) {
			   $this->collDetalleGrupoTrabajoScs = array();
			} else {

				$criteria->add(DetalleGrupoTrabajoScPeer::USER_ID, $this->id);

				DetalleGrupoTrabajoScPeer::addSelectColumns($criteria);
				$this->collDetalleGrupoTrabajoScs = DetalleGrupoTrabajoScPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DetalleGrupoTrabajoScPeer::USER_ID, $this->id);

				DetalleGrupoTrabajoScPeer::addSelectColumns($criteria);
				if (!isset($this->lastDetalleGrupoTrabajoScCriteria) || !$this->lastDetalleGrupoTrabajoScCriteria->equals($criteria)) {
					$this->collDetalleGrupoTrabajoScs = DetalleGrupoTrabajoScPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDetalleGrupoTrabajoScCriteria = $criteria;
		return $this->collDetalleGrupoTrabajoScs;
	}

	/**
	 * Returns the number of related DetalleGrupoTrabajoSc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DetalleGrupoTrabajoSc objects.
	 * @throws     PropelException
	 */
	public function countDetalleGrupoTrabajoScs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDetalleGrupoTrabajoScs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DetalleGrupoTrabajoScPeer::USER_ID, $this->id);

				$count = DetalleGrupoTrabajoScPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DetalleGrupoTrabajoScPeer::USER_ID, $this->id);

				if (!isset($this->lastDetalleGrupoTrabajoScCriteria) || !$this->lastDetalleGrupoTrabajoScCriteria->equals($criteria)) {
					$count = DetalleGrupoTrabajoScPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDetalleGrupoTrabajoScs);
				}
			} else {
				$count = count($this->collDetalleGrupoTrabajoScs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DetalleGrupoTrabajoSc object to this object
	 * through the DetalleGrupoTrabajoSc foreign key attribute.
	 *
	 * @param      DetalleGrupoTrabajoSc $l DetalleGrupoTrabajoSc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDetalleGrupoTrabajoSc(DetalleGrupoTrabajoSc $l)
	{
		if ($this->collDetalleGrupoTrabajoScs === null) {
			$this->initDetalleGrupoTrabajoScs();
		}
		if (!in_array($l, $this->collDetalleGrupoTrabajoScs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDetalleGrupoTrabajoScs, $l);
			$l->setUserSc($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related DetalleGrupoTrabajoScs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getDetalleGrupoTrabajoScsJoinGrupoTrabajoSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDetalleGrupoTrabajoScs === null) {
			if ($this->isNew()) {
				$this->collDetalleGrupoTrabajoScs = array();
			} else {

				$criteria->add(DetalleGrupoTrabajoScPeer::USER_ID, $this->id);

				$this->collDetalleGrupoTrabajoScs = DetalleGrupoTrabajoScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DetalleGrupoTrabajoScPeer::USER_ID, $this->id);

			if (!isset($this->lastDetalleGrupoTrabajoScCriteria) || !$this->lastDetalleGrupoTrabajoScCriteria->equals($criteria)) {
				$this->collDetalleGrupoTrabajoScs = DetalleGrupoTrabajoScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastDetalleGrupoTrabajoScCriteria = $criteria;

		return $this->collDetalleGrupoTrabajoScs;
	}

	/**
	 * Clears out the collSolicitudGrupoTrabajoScs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSolicitudGrupoTrabajoScs()
	 */
	public function clearSolicitudGrupoTrabajoScs()
	{
		$this->collSolicitudGrupoTrabajoScs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSolicitudGrupoTrabajoScs collection (array).
	 *
	 * By default this just sets the collSolicitudGrupoTrabajoScs collection to an empty array (like clearcollSolicitudGrupoTrabajoScs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSolicitudGrupoTrabajoScs()
	{
		$this->collSolicitudGrupoTrabajoScs = array();
	}

	/**
	 * Gets an array of SolicitudGrupoTrabajoSc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related SolicitudGrupoTrabajoScs from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SolicitudGrupoTrabajoSc[]
	 * @throws     PropelException
	 */
	public function getSolicitudGrupoTrabajoScs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSolicitudGrupoTrabajoScs === null) {
			if ($this->isNew()) {
			   $this->collSolicitudGrupoTrabajoScs = array();
			} else {

				$criteria->add(SolicitudGrupoTrabajoScPeer::USER_ID, $this->id);

				SolicitudGrupoTrabajoScPeer::addSelectColumns($criteria);
				$this->collSolicitudGrupoTrabajoScs = SolicitudGrupoTrabajoScPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SolicitudGrupoTrabajoScPeer::USER_ID, $this->id);

				SolicitudGrupoTrabajoScPeer::addSelectColumns($criteria);
				if (!isset($this->lastSolicitudGrupoTrabajoScCriteria) || !$this->lastSolicitudGrupoTrabajoScCriteria->equals($criteria)) {
					$this->collSolicitudGrupoTrabajoScs = SolicitudGrupoTrabajoScPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSolicitudGrupoTrabajoScCriteria = $criteria;
		return $this->collSolicitudGrupoTrabajoScs;
	}

	/**
	 * Returns the number of related SolicitudGrupoTrabajoSc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SolicitudGrupoTrabajoSc objects.
	 * @throws     PropelException
	 */
	public function countSolicitudGrupoTrabajoScs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSolicitudGrupoTrabajoScs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SolicitudGrupoTrabajoScPeer::USER_ID, $this->id);

				$count = SolicitudGrupoTrabajoScPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SolicitudGrupoTrabajoScPeer::USER_ID, $this->id);

				if (!isset($this->lastSolicitudGrupoTrabajoScCriteria) || !$this->lastSolicitudGrupoTrabajoScCriteria->equals($criteria)) {
					$count = SolicitudGrupoTrabajoScPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSolicitudGrupoTrabajoScs);
				}
			} else {
				$count = count($this->collSolicitudGrupoTrabajoScs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SolicitudGrupoTrabajoSc object to this object
	 * through the SolicitudGrupoTrabajoSc foreign key attribute.
	 *
	 * @param      SolicitudGrupoTrabajoSc $l SolicitudGrupoTrabajoSc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSolicitudGrupoTrabajoSc(SolicitudGrupoTrabajoSc $l)
	{
		if ($this->collSolicitudGrupoTrabajoScs === null) {
			$this->initSolicitudGrupoTrabajoScs();
		}
		if (!in_array($l, $this->collSolicitudGrupoTrabajoScs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSolicitudGrupoTrabajoScs, $l);
			$l->setUserSc($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related SolicitudGrupoTrabajoScs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getSolicitudGrupoTrabajoScsJoinGrupoTrabajoSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSolicitudGrupoTrabajoScs === null) {
			if ($this->isNew()) {
				$this->collSolicitudGrupoTrabajoScs = array();
			} else {

				$criteria->add(SolicitudGrupoTrabajoScPeer::USER_ID, $this->id);

				$this->collSolicitudGrupoTrabajoScs = SolicitudGrupoTrabajoScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SolicitudGrupoTrabajoScPeer::USER_ID, $this->id);

			if (!isset($this->lastSolicitudGrupoTrabajoScCriteria) || !$this->lastSolicitudGrupoTrabajoScCriteria->equals($criteria)) {
				$this->collSolicitudGrupoTrabajoScs = SolicitudGrupoTrabajoScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastSolicitudGrupoTrabajoScCriteria = $criteria;

		return $this->collSolicitudGrupoTrabajoScs;
	}

	/**
	 * Clears out the collAsignacionScs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAsignacionScs()
	 */
	public function clearAsignacionScs()
	{
		$this->collAsignacionScs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAsignacionScs collection (array).
	 *
	 * By default this just sets the collAsignacionScs collection to an empty array (like clearcollAsignacionScs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAsignacionScs()
	{
		$this->collAsignacionScs = array();
	}

	/**
	 * Gets an array of AsignacionSc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related AsignacionScs from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AsignacionSc[]
	 * @throws     PropelException
	 */
	public function getAsignacionScs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAsignacionScs === null) {
			if ($this->isNew()) {
			   $this->collAsignacionScs = array();
			} else {

				$criteria->add(AsignacionScPeer::USER_ID, $this->id);

				AsignacionScPeer::addSelectColumns($criteria);
				$this->collAsignacionScs = AsignacionScPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AsignacionScPeer::USER_ID, $this->id);

				AsignacionScPeer::addSelectColumns($criteria);
				if (!isset($this->lastAsignacionScCriteria) || !$this->lastAsignacionScCriteria->equals($criteria)) {
					$this->collAsignacionScs = AsignacionScPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAsignacionScCriteria = $criteria;
		return $this->collAsignacionScs;
	}

	/**
	 * Returns the number of related AsignacionSc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AsignacionSc objects.
	 * @throws     PropelException
	 */
	public function countAsignacionScs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAsignacionScs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AsignacionScPeer::USER_ID, $this->id);

				$count = AsignacionScPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AsignacionScPeer::USER_ID, $this->id);

				if (!isset($this->lastAsignacionScCriteria) || !$this->lastAsignacionScCriteria->equals($criteria)) {
					$count = AsignacionScPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAsignacionScs);
				}
			} else {
				$count = count($this->collAsignacionScs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AsignacionSc object to this object
	 * through the AsignacionSc foreign key attribute.
	 *
	 * @param      AsignacionSc $l AsignacionSc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAsignacionSc(AsignacionSc $l)
	{
		if ($this->collAsignacionScs === null) {
			$this->initAsignacionScs();
		}
		if (!in_array($l, $this->collAsignacionScs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAsignacionScs, $l);
			$l->setUserSc($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related AsignacionScs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getAsignacionScsJoinGrupoTrabajoSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAsignacionScs === null) {
			if ($this->isNew()) {
				$this->collAsignacionScs = array();
			} else {

				$criteria->add(AsignacionScPeer::USER_ID, $this->id);

				$this->collAsignacionScs = AsignacionScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AsignacionScPeer::USER_ID, $this->id);

			if (!isset($this->lastAsignacionScCriteria) || !$this->lastAsignacionScCriteria->equals($criteria)) {
				$this->collAsignacionScs = AsignacionScPeer::doSelectJoinGrupoTrabajoSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastAsignacionScCriteria = $criteria;

		return $this->collAsignacionScs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related AsignacionScs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getAsignacionScsJoinTreeSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAsignacionScs === null) {
			if ($this->isNew()) {
				$this->collAsignacionScs = array();
			} else {

				$criteria->add(AsignacionScPeer::USER_ID, $this->id);

				$this->collAsignacionScs = AsignacionScPeer::doSelectJoinTreeSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AsignacionScPeer::USER_ID, $this->id);

			if (!isset($this->lastAsignacionScCriteria) || !$this->lastAsignacionScCriteria->equals($criteria)) {
				$this->collAsignacionScs = AsignacionScPeer::doSelectJoinTreeSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastAsignacionScCriteria = $criteria;

		return $this->collAsignacionScs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related AsignacionScs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getAsignacionScsJoinIndicatorsSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAsignacionScs === null) {
			if ($this->isNew()) {
				$this->collAsignacionScs = array();
			} else {

				$criteria->add(AsignacionScPeer::USER_ID, $this->id);

				$this->collAsignacionScs = AsignacionScPeer::doSelectJoinIndicatorsSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AsignacionScPeer::USER_ID, $this->id);

			if (!isset($this->lastAsignacionScCriteria) || !$this->lastAsignacionScCriteria->equals($criteria)) {
				$this->collAsignacionScs = AsignacionScPeer::doSelectJoinIndicatorsSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastAsignacionScCriteria = $criteria;

		return $this->collAsignacionScs;
	}

	/**
	 * Clears out the collDataIndicadoress collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDataIndicadoress()
	 */
	public function clearDataIndicadoress()
	{
		$this->collDataIndicadoress = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDataIndicadoress collection (array).
	 *
	 * By default this just sets the collDataIndicadoress collection to an empty array (like clearcollDataIndicadoress());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDataIndicadoress()
	{
		$this->collDataIndicadoress = array();
	}

	/**
	 * Gets an array of DataIndicadores objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserSc has previously been saved, it will retrieve
	 * related DataIndicadoress from storage. If this UserSc is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DataIndicadores[]
	 * @throws     PropelException
	 */
	public function getDataIndicadoress($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataIndicadoress === null) {
			if ($this->isNew()) {
			   $this->collDataIndicadoress = array();
			} else {

				$criteria->add(DataIndicadoresPeer::USER_ID, $this->id);

				DataIndicadoresPeer::addSelectColumns($criteria);
				$this->collDataIndicadoress = DataIndicadoresPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DataIndicadoresPeer::USER_ID, $this->id);

				DataIndicadoresPeer::addSelectColumns($criteria);
				if (!isset($this->lastDataIndicadoresCriteria) || !$this->lastDataIndicadoresCriteria->equals($criteria)) {
					$this->collDataIndicadoress = DataIndicadoresPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDataIndicadoresCriteria = $criteria;
		return $this->collDataIndicadoress;
	}

	/**
	 * Returns the number of related DataIndicadores objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DataIndicadores objects.
	 * @throws     PropelException
	 */
	public function countDataIndicadoress(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDataIndicadoress === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DataIndicadoresPeer::USER_ID, $this->id);

				$count = DataIndicadoresPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DataIndicadoresPeer::USER_ID, $this->id);

				if (!isset($this->lastDataIndicadoresCriteria) || !$this->lastDataIndicadoresCriteria->equals($criteria)) {
					$count = DataIndicadoresPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDataIndicadoress);
				}
			} else {
				$count = count($this->collDataIndicadoress);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DataIndicadores object to this object
	 * through the DataIndicadores foreign key attribute.
	 *
	 * @param      DataIndicadores $l DataIndicadores
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDataIndicadores(DataIndicadores $l)
	{
		if ($this->collDataIndicadoress === null) {
			$this->initDataIndicadoress();
		}
		if (!in_array($l, $this->collDataIndicadoress, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDataIndicadoress, $l);
			$l->setUserSc($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related DataIndicadoress from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getDataIndicadoressJoinIndicatorsSc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataIndicadoress === null) {
			if ($this->isNew()) {
				$this->collDataIndicadoress = array();
			} else {

				$criteria->add(DataIndicadoresPeer::USER_ID, $this->id);

				$this->collDataIndicadoress = DataIndicadoresPeer::doSelectJoinIndicatorsSc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DataIndicadoresPeer::USER_ID, $this->id);

			if (!isset($this->lastDataIndicadoresCriteria) || !$this->lastDataIndicadoresCriteria->equals($criteria)) {
				$this->collDataIndicadoress = DataIndicadoresPeer::doSelectJoinIndicatorsSc($criteria, $con, $join_behavior);
			}
		}
		$this->lastDataIndicadoresCriteria = $criteria;

		return $this->collDataIndicadoress;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserSc is new, it will return
	 * an empty collection; or if this UserSc has previously
	 * been saved, it will retrieve related DataIndicadoress from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserSc.
	 */
	public function getDataIndicadoressJoinGroupDataIndicadores($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserScPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataIndicadoress === null) {
			if ($this->isNew()) {
				$this->collDataIndicadoress = array();
			} else {

				$criteria->add(DataIndicadoresPeer::USER_ID, $this->id);

				$this->collDataIndicadoress = DataIndicadoresPeer::doSelectJoinGroupDataIndicadores($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DataIndicadoresPeer::USER_ID, $this->id);

			if (!isset($this->lastDataIndicadoresCriteria) || !$this->lastDataIndicadoresCriteria->equals($criteria)) {
				$this->collDataIndicadoress = DataIndicadoresPeer::doSelectJoinGroupDataIndicadores($criteria, $con, $join_behavior);
			}
		}
		$this->lastDataIndicadoresCriteria = $criteria;

		return $this->collDataIndicadoress;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTreeScsRelatedByUserId) {
				foreach ((array) $this->collTreeScsRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTreeScsRelatedByResponsableId) {
				foreach ((array) $this->collTreeScsRelatedByResponsableId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTreeUsers) {
				foreach ((array) $this->collTreeUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIndicatorsScs) {
				foreach ((array) $this->collIndicatorsScs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGrupoTrabajoScs) {
				foreach ((array) $this->collGrupoTrabajoScs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDetalleGrupoTrabajoScs) {
				foreach ((array) $this->collDetalleGrupoTrabajoScs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSolicitudGrupoTrabajoScs) {
				foreach ((array) $this->collSolicitudGrupoTrabajoScs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAsignacionScs) {
				foreach ((array) $this->collAsignacionScs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDataIndicadoress) {
				foreach ((array) $this->collDataIndicadoress as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTreeScsRelatedByUserId = null;
		$this->collTreeScsRelatedByResponsableId = null;
		$this->collTreeUsers = null;
		$this->collIndicatorsScs = null;
		$this->collGrupoTrabajoScs = null;
		$this->collDetalleGrupoTrabajoScs = null;
		$this->collSolicitudGrupoTrabajoScs = null;
		$this->collAsignacionScs = null;
		$this->collDataIndicadoress = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseUserSc:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseUserSc::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseUserSc
